// Generator.java ------------------------------------------------------------------------------------------
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;

public class Generator {
    public float[] x, y;
    private int n = 1;

    private double sampling(double x) {
        if (x == 0) 
            return 1.0;
        return Math.sin(x) / x;
    }

    // T = 64, A = 16, d = 32
    private double fourierCoefficient(double t, int n) {
        double p = (32 / (Math.PI * n)) * sampling(Math.PI * n / 2) - 1;
        double q = Math.sin((Math.PI * n / 32) * t);
        return p*q;
    }

    public Generator(float min, float max, int n) {
        x = linspace(min, max, n);
        y = new float[n];
        Arrays.fill(y, 0);
    }

    public static float[] linspace(float min, float max, int points) {  
        float[] d = new float[points];  
        for (int i = 0; i < points; i++){  
            d[i] = min + i * (max - min) / (points - 1);  
        }  
        return d;  
    }  

    public void increment () {
        for (int i = 0; i < x.length; ++i) {
            y[i] += fourierCoefficient(x[i], n);
        }
        ++n;
    }
}

// makefile ------------------------------------------------------------------------------------------

server: Server.class
	java Server
Server.class: Server.java
	javac Server.java
replier: Replier.class
	java Replier
Replier.class: Replier.java
	javac Replier.java
clear:
	del *.class 
	del *~

// merge_files.py ------------------------------------------------------------------------------------------

import os


plane_txt_name = 'Angel_Lopez_Manriquez_DSD_4CM1_3.txt'

buff = ''
for fname in os.listdir('.'):
    if fname in (plane_txt_name, __name__):
        continue
    buff += f'// {fname} ' + '-' * 90 + '\n'
    with open(fname, 'r') as f:
        buff += f.read()
    buff += '\n'
with open(plane_txt_name, 'w') as f:
    f.write(buff)

// Message.java ------------------------------------------------------------------------------------------
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class Message {
    public static final int DATA_LENGTH = 1 << 15, MESSAGE_SIZE = DATA_LENGTH + 16;
    public static final int UNKNOWN = -1, SUM = 1, PLOT = 2, SET_X_AXIS = 3;
    public static final int REQUEST = 1, REPLY = 2;

    public int type, requestId, operationId, dataLength;
    public byte[] data;


    public Message(int msgType, int reqId, int opId, int dataLen, byte[] src) {
        type = msgType;
        requestId = reqId;
        operationId = opId;
        dataLength = dataLen;
        data = src;  // src.length must be equal to DATA_LENGTH
    }

    public Message(int msgType, int reqId, int opId) {
        type = msgType;
        requestId = reqId;
        operationId = opId;
        dataLength = 0;
        data = new byte[DATA_LENGTH];
    }

    public Message(byte[] bytes) {
        ByteBuffer bb = ByteBuffer.wrap(bytes);
        bb.order(ByteOrder.LITTLE_ENDIAN);
        type = bb.getInt();
        requestId = bb.getInt();
        operationId = bb.getInt();
        dataLength = bb.getInt();
        data = new byte[DATA_LENGTH];
        for (int i = 0; i < data.length; ++i) 
            data[i] = bb.get();
    }

    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Float size: " + Float.SIZE + ", ");
        sb.append("Int size: " + Integer.SIZE + ", ");
        sb.append("Message type: " + type + ", ");
        sb.append("request id: " + requestId + ", ");
        sb.append("operation id: " + operationId + ", ");
        sb.append("argument length: " + dataLength + ", ");
        sb.append("\n");
        return sb.toString();
    }

    public byte[] serialize() {
        byte result[] = new byte[MESSAGE_SIZE];
        ByteBuffer byteBuffer = ByteBuffer.wrap(result);
        byteBuffer.putInt(type); 
        byteBuffer.putInt(requestId); 
        byteBuffer.putInt(operationId); 
        byteBuffer.putInt(dataLength); 
        for (int i = 0; i < DATA_LENGTH; ++i)
            byteBuffer.put(data[i]);
        return byteBuffer.array();
    }
}
// Replier.java ------------------------------------------------------------------------------------------
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;


public class Replier {
    private DatagramSocket socket;
    private byte[] buf;
    private int port;
    InetAddress remoteAddress;

 
    public Replier () {
        try {
            buf = new byte[Message.MESSAGE_SIZE];
            port = 5400;
            socket = new DatagramSocket(port);
        } catch (SocketException e) {
            System.out.println(e);
        }
    }

    public void printBytes(byte[] bytes, int from, int to) {
        int j = 0, lineCount = 0;
        System.out.printf("\n%04d:   ", ++lineCount);
        for (int i = from; i < to; ++i) {
            byte b = bytes[i];
            String st = String.format("%02X", b);
            System.out.print(st + " ");
            if (++j == 16) {
                System.out.printf("\n%04d: ", ++lineCount);
                j = 0;
            }
            if (j % 4 == 0) 
                System.out.print("\t"); 
        }
        System.out.println();
    }

    public byte[] getRequest() {
        DatagramPacket packet = new DatagramPacket(buf, buf.length);
        System.out.println("Waiting for a request\n");
        try {
            socket.receive(packet);
        } catch (IOException e) {
            System.out.println(e);
        }
        remoteAddress = packet.getAddress();
        port = packet.getPort();
        byte[] data = packet.getData();
        printBytes(data, 0, 32);
        return data;
    }

    public boolean sendReply(int replyType, int requestId, int operationId) {
        Message reply = new Message(replyType, requestId, operationId);
        byte[] response = reply.serialize();
        DatagramPacket pack = new DatagramPacket(response, response.length, remoteAddress, port);
        try {
            socket.send(pack);
            System.out.println("Reply sent: ");
            printBytes(response, 0, 32);
            return true;
        } catch (IOException e) {
            System.out.println(e);
            return false;
        }
        // close();
    }

    public void close() {
        socket.close();
    }
}
// Server.java ------------------------------------------------------------------------------------------
/**
 * Author: Angel Manriquez
 */

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.ScatterChart;
import javafx.scene.chart.XYChart;
import javafx.stage.Stage;


public class Server extends Application { 

    private final double xMin = -32, xMax = 96;
    private final int yMin = -8, yMax = 8;
    private Set<Integer> requestReceived = new HashSet<>();


    public XYChart.Series<Number, Number> getSeries(ArrayList<Number> x, ArrayList<Number> y) {
        //  Configuring Series and adding data to the series    
        XYChart.Series<Number, Number> series = new XYChart.Series<>();  
        for (int i = 0; i < x.size(); ++i) {
            series.getData().add(new XYChart.Data<Number, Number>(x.get(i), y.get(i)));  
        }
        return series;
    }

    // Platform.runLater(() -> holder.getData().addAll(points));
    public void addPoints(XYChart.Series<Number, Number> holder, ArrayList<XYChart.Data<Number, Number>> points) {
        // for (int i = 0; i < points.size(); ++i) {
        //     XYChart.Data<Float, Float> data = points.get(i);
        //     Platform.runLater(() -> holder.getData().add(data)); 
        // }
        Platform.runLater(() -> {
            holder.getData().addAll(points);
        });
    }


    public void removePoints(XYChart.Series<Number, Number> holder) {
        final int n = holder.getData().size();
        for (int i = 0; i < n; ++i) {
            Platform.runLater(() -> {
                holder.getData().remove(0);
            });
        }
    }

    public void sleepMilliseconds(int ms) {
        try {
            TimeUnit.MILLISECONDS.sleep(ms);
        } catch (InterruptedException e) {
            System.out.println(e);
        }
    }

    public void removePoints(XYChart.Series<Number, Number> holder, ArrayList<XYChart.Data<Number, Number>> points) {
        Platform.runLater(() -> {
            holder.getData().removeAll(points);
        });
    }

    public void printArgs(float[] x, float[] y) {
        for (int i = 0; i < x.length; ++i)
            System.out.printf("%f, %f \n", x[i], y[i]);
    }


    private ArrayList<XYChart.Data<Number, Number>> getPointsAsArrayList(Message messageRequest, float[] x, float[] y) {
        ByteBuffer bb = ByteBuffer.wrap(messageRequest.data);
        bb.order(ByteOrder.LITTLE_ENDIAN);
        if (messageRequest.operationId == Message.SET_X_AXIS)
            for (int i = 0; i < x.length; ++i) 
                x[i] = bb.getFloat();
        else
            for (int i = 0; i < y.length; ++i) 
                y[i] = bb.getFloat();
        System.out.println("Message received: \n" + messageRequest + "\n");
        ArrayList<XYChart.Data<Number, Number>> points = new ArrayList<>(x.length);
        for (int i = 0; i < x.length; ++i) points.add(new XYChart.Data<Number, Number>(x[i], y[i]));
        return points;
    }

    private Message getMessage(Replier replier, boolean repeated) {
        byte[] request = replier.getRequest();
        Message messageRequest = new Message(request);
        int requestId = messageRequest.requestId;
        if (requestReceived.contains(requestId)) {
            replier.sendReply(Message.REPLY, requestId + 1, Message.PLOT);
            repeated = true;
        }
        requestReceived.add(requestId);
        repeated = false;
        return messageRequest; 
    }

    // controller
    public void updateChart(XYChart.Series<Number, Number> holder) throws InterruptedException {
        Replier replier = new Replier();
        int n = Message.DATA_LENGTH >> 2;
        float x[] = new float[n], y[] = new float[n];
        boolean repeated = false;

        // add points first, then in the loop we'll remove them with threading
        Message message = getMessage(replier, repeated);
        ArrayList<XYChart.Data<Number, Number>> points = getPointsAsArrayList(message, x, y);
        addPoints(holder, points);    
        replier.sendReply(Message.REPLY, message.requestId + 1, Message.PLOT);

        while (true) {
            final ArrayList<XYChart.Data<Number, Number>> finalPoints = points;
            Thread remove = new Thread(() -> {
                sleepMilliseconds(2500);
                removePoints(holder, finalPoints);
            });
            remove.start();
            message = getMessage(replier, repeated);
            if (repeated) continue;
            points = getPointsAsArrayList(message, x, y);
            try { 
                remove.join();
            } catch (InterruptedException e) { System.out.println(e);}
            addPoints(holder, points);    
            replier.sendReply(Message.REPLY, message.requestId + 1, Message.PLOT);
        }
        // Platform.exit();
    }
  
    @Override  
    public void start(Stage primaryStage) throws Exception {  
        // Configuring Xaxis and Yaxis  
        NumberAxis xaxis = new NumberAxis(xMin, xMax, 5);  
        NumberAxis yaxis = new NumberAxis(yMin, yMax, 5);  
        xaxis.setLabel("X");  
        yaxis.setLabel("Y");  
          
        // Configuring ScatterChart    
        ScatterChart<Number, Number> s = new ScatterChart<>(xaxis, yaxis);  
        s.setTitle("Proyecto 3");  

        XYChart.Series<Number, Number> series = new XYChart.Series<>();  
        series.setName("Graficador y receptor (Java) de las sumas parciales crecientes de Fourier enviadas por C++");  
          
        //Adding series to the ScatterChart  
        s.getData().add(series);  

        configGroupAndScene(primaryStage, s);
        new Thread(() -> {
            try {
                updateChart(series);
            } catch (InterruptedException e) { 
                System.out.println(e); 
            }
        }).start();
    }  

    public void configGroupAndScene(Stage primaryStage, ScatterChart<Number, Number> s) {
        //Configuring group and Scene   
        double horizontalSize = 800, verticalSize = 600;
        Group root = new Group();  
        s.setPrefSize(horizontalSize, verticalSize);
        root.getChildren().add(s);  
        Scene scene = new Scene(root, horizontalSize, verticalSize);  
        scene.getStylesheets().add("style.css");
        primaryStage.setScene(scene);  
        primaryStage.setTitle("Angel Lopez Manriquez 4CM1");  
        primaryStage.show();      
    }

    public static void main(String[] args) {  
        launch(args);  
    }  
  
}  
// style.css ------------------------------------------------------------------------------------------
.chart-symbol {
    -fx-background-radius: 1px ;
    -fx-padding: 1px ;
}
